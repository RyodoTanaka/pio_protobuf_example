/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 at Tue May 16 20:21:31 2023. */

#ifndef PB_GOOGLE_PROTOBUF_DURATION_PB_HPP_INCLUDED
#define PB_GOOGLE_PROTOBUF_DURATION_PB_HPP_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* A Duration represents a signed, fixed-length span of time represented
 as a count of seconds and fractions of seconds at nanosecond
 resolution. It is independent of any calendar and concepts like "day"
 or "month". It is related to Timestamp in that the difference between
 two Timestamp values is a Duration and it can be added or subtracted
 from a Timestamp. Range is approximately +-10,000 years.

 # Examples

 Example 1: Compute Duration from two Timestamps in pseudo code.

     Timestamp start = ...;
     Timestamp end = ...;
     Duration duration = ...;

     duration.seconds = end.seconds - start.seconds;
     duration.nanos = end.nanos - start.nanos;

     if (duration.seconds < 0 && duration.nanos > 0) {
       duration.seconds += 1;
       duration.nanos -= 1000000000;
     } else if (duration.seconds > 0 && duration.nanos < 0) {
       duration.seconds -= 1;
       duration.nanos += 1000000000;
     }

 Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

     Timestamp start = ...;
     Duration duration = ...;
     Timestamp end = ...;

     end.seconds = start.seconds + duration.seconds;
     end.nanos = start.nanos + duration.nanos;

     if (end.nanos < 0) {
       end.seconds -= 1;
       end.nanos += 1000000000;
     } else if (end.nanos >= 1000000000) {
       end.seconds += 1;
       end.nanos -= 1000000000;
     }

 Example 3: Compute Duration from datetime.timedelta in Python.

     td = datetime.timedelta(days=3, minutes=10)
     duration = Duration()
     duration.FromTimedelta(td)

 # JSON Mapping

 In JSON format, the Duration type is encoded as a string rather than an
 object, where the string ends in the suffix "s" (indicating seconds) and
 is preceded by the number of seconds, with nanoseconds expressed as
 fractional seconds. For example, 3 seconds with 0 nanoseconds should be
 encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
 be expressed in JSON format as "3.000000001s", and 3 seconds and 1
 microsecond should be expressed in JSON format as "3.000001s". */
typedef struct _google_protobuf_Duration {
    /* Signed seconds of the span of time. Must be from -315,576,000,000
 to +315,576,000,000 inclusive. Note: these bounds are computed from:
 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years */
    int64_t seconds;
    /* Signed fractions of a second at nanosecond resolution of the span
 of time. Durations less than one second are represented with a 0
 `seconds` field and a positive or negative `nanos` field. For durations
 of one second or more, a non-zero value for the `nanos` field must be
 of the same sign as the `seconds` field. Must be from -999,999,999
 to +999,999,999 inclusive. */
    int32_t nanos;
} google_protobuf_Duration;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define google_protobuf_Duration_init_default    {0, 0}
#define google_protobuf_Duration_init_zero       {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define google_protobuf_Duration_seconds_tag     1
#define google_protobuf_Duration_nanos_tag       2

/* Struct field encoding specification for nanopb */
#define google_protobuf_Duration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT64,    seconds,           1) \
X(a, STATIC,   SINGULAR, INT32,    nanos,             2)
#define google_protobuf_Duration_CALLBACK NULL
#define google_protobuf_Duration_DEFAULT NULL

extern const pb_msgdesc_t google_protobuf_Duration_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define google_protobuf_Duration_fields &google_protobuf_Duration_msg

/* Maximum encoded size of messages (where known) */
#define google_protobuf_Duration_size            22

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
